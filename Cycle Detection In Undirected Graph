//    Cycle Detection In Undirected Graph

//QUESTION LINK: https://www.codingninjas.com/studio/problems/cycle-detection-in-undirected-graph_1062670?topList=love-babbar-dsa-sheet-problems&leftPanelTab=0&leftPanelTabValue=PROBLEM

//APPROACH: USE OF KNOWLEDGE OF GRAPHS
//T.C:O(v+E)
//S.C:O(V+E)




CODE:

#include<unordered_map>
#include<list>
#include<queue>
bool isCycle(int srcNode,unordered_map<int,list<int>> &adjList,unordered_map<int,bool> visited){
    unordered_map<int,int> parentToChild;
    parentToChild[srcNode]=-1;
    visited[srcNode]=true;
    queue<int> q;
    q.push(srcNode);

    while(!q.empty()){
        int frontNode=q.front();
        q.pop();

        for(auto neighbour:adjList[frontNode]){
            if(visited[neighbour] && neighbour!=parentToChild[frontNode]){
                return true;
            }
            else if(!visited[neighbour]){
                visited[neighbour]=true;
                q.push(neighbour);
                parentToChild[neighbour]=frontNode;
            }
        
        }
    }

    return false;
}


string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
//    creation of adjacency list

    unordered_map<int,list<int>> adjList;
    for(int i=0;i<edges.size();i++){
        int u=edges[i][0];
        int v=edges[i][1];
        adjList[u].push_back(v);
        adjList[v].push_back(u);
    }

    unordered_map<int,bool> visited;

    //to handle disconnected components
    for(int i=0;i<n;i++){
        if(!visited[i]){
            bool ans=isCycle(i,adjList,visited);

            if(ans){
                return "Yes";
            }
        }
    }

    return "No";
}
