// 23. Merge k Sorted Lists

//QUESTION LINK: https://leetcode.com/problems/merge-k-sorted-lists/description/

//APPROACH: USE OF KNOWLEDGE OF HEAPS
//T.C:O(n*logk)
//S.C:O(k)




CODE:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
 
public:
 class compare{
     public:
     bool operator()(ListNode*a,ListNode*b){
         return a->val > b->val;
     }
 } ; 
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        priority_queue<ListNode*,vector<ListNode*>,compare> minHeap;

        for(int i=0;i<lists.size();i++){
            if(lists[i]!=NULL){
                  minHeap.push(lists[i]);
            }
        }

        ListNode*head=NULL;
        ListNode*tail=NULL;

        while(!minHeap.empty()){
            ListNode*top=minHeap.top();
            minHeap.pop();

            if(head==NULL){
                head=tail=top;

                if(head->next!=NULL){
                    minHeap.push(head->next);
                }
            }
            else{
                tail->next=top;
                tail=top;
                if(tail->next!=NULL){
                    minHeap.push(tail->next);
                }
            }
        }

        return head;
    }
};
