721. Accounts Merge







//QUESTION LNK: https://leetcode.com/problems/accounts-merge/description/


TOPIC:   GRAPHS


class DisjointSet {
    vector<int> rank, parent, size;
public:
    DisjointSet(int n) {
        rank.resize(n + 1, 0);
        parent.resize(n + 1);
        size.resize(n + 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    int findUPar(int node) {
        if (node == parent[node])
            return node;
        return parent[node] = findUPar(parent[node]);
    }

    void unionByRank(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (rank[ulp_u] < rank[ulp_v]) {
            parent[ulp_u] = ulp_v;
        }
        else if (rank[ulp_v] < rank[ulp_u]) {
            parent[ulp_v] = ulp_u;
        }
        else {
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }

    void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }

    int countDisjointSets() {
        unordered_set<int> uniqueParents;
        for (int i = 0; i < parent.size(); ++i) {
            uniqueParents.insert(findUPar(i));
        }
        return uniqueParents.size();
    }
};


class Solution {
public:
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
        int n=accounts.size();
        DisjointSet ds(n);
        unordered_map<string,int> mapMailNode;
        for(int i=0;i<n;i++){
            for(int j=1;j<accounts[i].size();j++){
                string mail=accounts[i][j];
                if(mapMailNode.find(mail)==mapMailNode.end()){
                    mapMailNode[mail]=i;
                }
                else{
                    ds.unionByRank(i,mapMailNode[mail]);
                }
            }
        }

        unordered_map<int,vector<string>> NodeToMail;
        for(auto &it:mapMailNode){
            string mail=it.first;
            int node=it.second;
            NodeToMail[ds.findUPar(node)].push_back(mail);
        }
        vector<vector<string>> ans;

        for(auto &it:NodeToMail){
            int node=it.first;
            vector<string> temp;
            for(auto &mail:it.second){
                temp.push_back(mail);
            }
            if(temp.size()>0){
                sort(temp.begin(),temp.end());
                temp.insert(temp.begin(),accounts[node][0]);
                ans.push_back(temp);
            }
        }

        return ans;
    }
};
