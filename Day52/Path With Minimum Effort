
1631. Path With Minimum Effort




//T.C: O(n*m* log(n*m))
//S.C: O(n*m)

//QUESTION LNK:  https://leetcode.com/problems/path-with-minimum-effort/description/


USE OF KNOWLEDGE OF  Graphs

class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
        int n=heights.size();
        int m=heights[0].size();
        vector<vector<int>> dist(n,vector<int>(m,1e9));
        dist[0][0]=0;
        priority_queue<
        pair<int,pair<int,int>>,
        vector<pair<int,pair<int,int>>>,
        greater<pair<int,pair<int,int>>>
        > pq;

        pq.push({0,{0,0}});
        int delRow[]={-1,0,1,0};
        int delCol[]={0,1,0,-1};

        while(!pq.empty()){
            int diff=pq.top().first;
            int row=pq.top().second.first;
            int col=pq.top().second.second;
            pq.pop();

            if(row==n-1 && col==m-1) return diff;

            for(int i=0;i<4;i++){
                int nRow=row+delRow[i];
                int nCol=col+delCol[i];
               if(nRow>=0 && nRow<n && nCol>=0 && nCol<m){
                int curDiff=max(diff,abs(heights[nRow][nCol]-heights[row][col]));
                if(curDiff<dist[nRow][nCol]){
                    dist[nRow][nCol]=curDiff;
                    pq.push({curDiff,{nRow,nCol}});
                }
               }
            }
        }

        return 0;
    }
};
