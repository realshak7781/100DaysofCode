
// Prim's MST

//QUESTION LINK: https://www.codingninjas.com/studio/problems/prim-s-mst_1095633?topList=love-babbar-dsa-sheet-problems&leftPanelTab=0&count=25&page=1&search=&sort_entity=order&sort_order=ASC&leftPanelTabValue=PROBLEM

//APPROACH: USE OF KNOWLEDGE OF GRAPHS
//T.C:O(vLOGV)
//S.C:O(V+E)





CODE:

#include <bits/stdc++.h> 
vector<pair<pair<int, int>, int>> calculatePrimsMST(int n, int m, vector<pair<pair<int, int>, int>> &g)
{
    // create an adjacency list
    unordered_map<int,list<pair<int,int>>> adjList;
    for(int i=0;i<g.size();i++){
        int u=g[i].first.first;
        int v=g[i].first.second;
        int weight=g[i].second;

        adjList[u].push_back({v,weight});
        adjList[v].push_back({u,weight});
    }

    vector<int> key(n+1,INT_MAX);
    vector<bool> mst(n+1,false);
    vector<int>parent(n+1,-1);

    key[1]=0;
    parent[1]=-1;
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
    pq.push({0,1});

   
   while(!pq.empty()){
       int u=pq.top().second;
       pq.pop();

       if(mst[u]) continue;

       mst[u]=true;

            for(auto neighbour : adjList[u]){
                int v=neighbour.first;
                int w=neighbour.second;
                if(mst[v]==false && w<key[v]){
                    key[v]=w;
                    parent[v]=u;
                    pq.push({key[v],v});
                }
        }
   }

    

    vector<pair<pair<int,int> ,int> > ans;

    for(int i=2;i<=n;i++){
           ans.push_back({{parent[i],i},key[i]}); 
    }
   
   return ans;
}
