#include<bits\stdc++.h>
using namespace std;

class TrieNode{
    public:
    char data;
    TrieNode *childrenNode[26];
    bool isTerminalNode;

    TrieNode(char ch){
        data=ch;
         for (int i = 0; i < 26; i++)
        {
            childrenNode[i] = nullptr;
        }
        isTerminalNode = false;
    }
};


class Trie{
    public:
    TrieNode*root;

    Trie(){
        root=new TrieNode('\0');
    }

    void insertUtil(TrieNode*root,string word){

        // base case
        if(word.length()==0){
             root->isTerminalNode = true;
             return;
        }
        int charIndex = word[0] - 'a';
        TrieNode *child;

        if (root->childrenNode[charIndex] != nullptr)
        {
            // word PRESENT
            child = root->childrenNode[charIndex];
        }
        else
        {
            // ABSENT
            child = new TrieNode(word[0]);
           root->childrenNode[charIndex]=child ;
        }

        insertUtil(child,word.substr(1));
    }

     void insertWord(string word)
    {
        insertUtil(root, word);
    }


    // searching a word

    bool searchUtil(TrieNode*root,string word){

        if(word.length()==0){
            return root->isTerminalNode;
        }

        int charIndex=word[0]-'a';
        TrieNode*child;

        if(root->childrenNode[charIndex]!=nullptr){
            child=root->childrenNode[charIndex];
        }
        else{
            return false;
        }

        return searchUtil(child,word.substr(1));
    }

     bool searchWord(string word){
       return searchUtil(root,word);
    }


    // remove word

    
    void removeUtil(TrieNode*root,string word){
        if(word.size()==0){
            root->isTerminalNode=false;
            return;
        }

        int charIndex=word[0]-'a';
        TrieNode*child;

        if(root->childrenNode[charIndex]){
            child=root->childrenNode[charIndex];
        }
        else{
            return;
        }

          removeUtil(child,word.substr(1));
    }

    void removeWord(string word){
        removeUtil(root,word);
    }


};


int main(){
    Trie *t= new Trie();

     t->insertWord("arm");    
    t->insertWord("done");    
    t->insertWord("time");    


   cout<<"Present or Not: "<<t->searchWord("dome")<<endl;


    return 0;
}
