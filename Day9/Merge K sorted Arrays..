//This questions uses the concepts of Min heap;;;

//question Link::  https://www.codingninjas.com/studio/problems/merge-k-sorted-arrays_975379?leftPanelTab=0&leftPanelTabValue=SUBMISSION

//code:

//int n=size of arrays
//T.C:  o(n*k log(k))
//S.C:  o(n*k)

#include <bits/stdc++.h> 
class node{
    public:
    int data;
    int row;
    int col;

    node(int val,int i,int j){
        this->data=val;
        this->row=i;
        this->col=j;
    }
};

class compare{
    public:
    bool operator()(node*a,node*b){
        return a->data > b->data;
    }
};

vector<int> mergeKSortedArrays(vector<vector<int>>&kArrays, int k)
{
    priority_queue<node*,vector<node*>,compare> minHeap;
    // step1:min heap for first element of every array
    for(int i=0;i<k;i++){
      node*temp=new node(kArrays[i][0],i,0);
      minHeap.push(temp);
    }

    vector<int> ans;
// step2:pop the top element and add it to answer array and add the next element to minHeap;
    while(!minHeap.empty()){
        node*top=minHeap.top();
        minHeap.pop();

        ans.push_back(top->data);

        int row=top->row;
        int col=top->col;

        if(col+1 < kArrays[row].size()){
            node*newNode=new node(kArrays[row][col+1],row,col+1);
            minHeap.push(newNode);
        }
    }

    return ans;
}
