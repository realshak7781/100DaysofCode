
212. Word Search II



//TC: O(n*m * 4^L)
//SC: o(n*M + S*L)


//QUESTION LNK: https://leetcode.com/problems/word-search-ii/



TOPIC:  GRAPHS AND TRIES


CODE:

class TrieNode{
    public:
    char data;
    TrieNode *children[26];
    bool isTerminal;

    TrieNode(char ch){
        data=ch;
        for(int i=0;i<26;i++){
            children[i]=nullptr;
        }
        isTerminal=false;
    }
};

class Trie{
    public:
    TrieNode* root;

    Trie(){
        root=new TrieNode('\0');
    }

    void insertUtil(TrieNode*root,string word){
        if(word.length()==0){
            root->isTerminal=true;
            return;
        }

        char ch=word[0];
        int index=ch-'a';
        TrieNode*child;

        if(root->children[index]){
            child=root->children[index];
        }
        else{
            child=new TrieNode(ch);
            root->children[index]=child;
        }

        insertUtil(child,word.substr(1));
    }

    void insertWord(string word)
    {
        insertUtil(root, word);
    }
};

class Solution {
private:
void dfs(int r,int c,string currentWord,TrieNode*node,vector<vector<char>>& board,vector<string>&ans,int rows,int cols,vector<vector<bool>>&vis){
    if(node->isTerminal){
        ans.push_back(currentWord);
        node->isTerminal=false;
    }

    vis[r][c]=true;

    vector<pair<int, int>> directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        for (auto& dir : directions) {
            int newX = r + dir.first;
            int newY = c + dir.second;

            // Check boundaries and if the cell is not visited
            if (newX >= 0 && newX < rows && newY >= 0 && newY < cols && !vis[newX][newY]) {
                char nextChar = board[newX][newY];
                if (node->children[nextChar-'a']) {
                    currentWord.push_back(nextChar);
                   dfs(newX, newY, currentWord, node->children[nextChar - 'a'], board, ans, rows, cols, vis);
                    currentWord.pop_back(); // Backtrack
                }
            }
        }
    vis[r][c]=false;
}
public:
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        Trie *t=new Trie();

        for(auto &word:words){
            t->insertWord(word);
        }

        // Trie created and now lets search for words
        vector<string> ans;
        int rows= board.size();
        int cols=board[0].size();

        vector<vector<bool>> vis(rows,vector<bool>(cols,false));


        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                char ch=board[i][j];
                if(!vis[i][j] && t->root->children[ch-'a']){
                    string currentWord(1,ch);
                    dfs(i,j,currentWord,t->root->children[ch-'a'],board,ans,rows,cols,vis);
                }
            }
        }

        return ans;
    }
};
