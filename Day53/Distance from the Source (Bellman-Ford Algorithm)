Distance from the Source (Bellman-Ford Algorithm)




//T.C: O(v.E)
//S.C: O((v)

//QUESTION LNK: https://www.geeksforgeeks.org/problems/distance-from-the-source-bellman-ford-algorithm/1


USE OF KNOWLEDGE OF  Graphs

class Solution {
  public:
    /*  Function to implement Bellman Ford
    *   edges: vector of vectors which represents the graph
    *   S: source vertex to start traversing graph with
    *   V: number of vertices
    */
    vector<int> bellman_ford(int V, vector<vector<int>>& edges, int S) {
       vector<int> dist(V,1e8);
       dist[S]=0;
       
    //   relaxing each edge v-1 times
      for(int i=1;i<V;i++){
         for(auto&it:edges){
          int u=it[0];
          int v=it[1];
          int weight=it[2];
          
         if(dist[u] != 1e8 && dist[u]+weight<dist[v]){
             dist[v]=dist[u]+weight;
         }
      }
      }
      
    //   check for negative cycle

      for(auto&it:edges){
          int u=it[0];
          int v=it[1];
          int weight=it[2];
          
         if(dist[u] != 1e8 &&dist[u]+weight<dist[v]){
             return {-1};
         }
      }
      
      
      
      return dist;
    
    }
};
