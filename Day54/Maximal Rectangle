85. Maximal Rectangle




//T.C:o(rows*cols)
//S.C: O(cols)

//QUESTION LNK: https://leetcode.com/problems/maximal-rectangle/submissions/1336260618/



 USE OF STACKS




class Solution {
private:
vector<int> prev_smaller_element(vector<int>heights,int n){
    stack<int> s;
    s.push(-1);
    vector<int> ans(n);

    for (int i = 0; i < n; ++i) {
        int curr=heights[i];
        while(s.top()!=-1 && heights[s.top()]>=curr){
            s.pop();
        }
        ans[i]=s.top();
        s.push(i);
    }
    return ans;
}

vector<int> next_smaller_element(vector<int>heights,int n){
    stack<int> s;
    s.push(-1);
    vector<int> ans(n);

    for(int i=n-1;i>=0;i--){
        int curr=heights[i];
        while(s.top()!=-1 && heights[s.top()]>=curr){
            s.pop();
        }
        ans[i]=s.top();
        s.push(i);
    }
    return ans;
} 
public:
    int maximalRectangle(vector<vector<char>>& matrix) {
        if (matrix.empty()) return 0;

        int cols = matrix[0].size();
        int rows = matrix.size();
        vector<int> heights(cols, 0);
        int maxArea = 0;

        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                if (matrix[i][j] == '1') {
                    heights[j] += 1;
                } else {
                    heights[j] = 0;
                }
            }

            vector<int> next = next_smaller_element(heights, cols);
            vector<int> prev = prev_smaller_element(heights, cols);

            for (int j = 0; j < cols; ++j) {
                if (next[j] == -1) {
                    next[j] = cols;
                }
                int length = heights[j];
                int width = next[j] - prev[j] - 1;
                int area = length * width;
                maxArea = max(maxArea, area);
            }
        }

        return maxArea;
    }
};
