1334. Find the City With the Smallest Number of Neighbors at a Threshold Distance





//T.C: O(v^3)
//S.C: O((v^2)

//QUESTION LNK: https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/



 USE OF GRAPHS

#define REP(i,a,b) for (int i = a; i <b; i++)
typedef vector<vector<int>> lvi;
typedef vector<int> vi;

class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        lvi matrix(n,vi(n,INT_MAX));

        REP(i,0,n){
            REP(j,0,n){
                if(i==j) matrix[i][j]=0;
            }
        }

        for(auto&it:edges){
            int i=it[0];
            int j=it[1];
            int pathWeight=it[2];
            matrix[i][j]=pathWeight;
            matrix[j][i]=pathWeight;
        }

        // creation of matrix done

         REP(via,0,n){
	       REP(i,0,n){
	           REP(j,0,n){
	              if(matrix[i][via]!=INT_MAX && matrix[via][j]!=INT_MAX && matrix[i][via]+matrix[via][j] <matrix[i][j]){
	                  matrix[i][j]=matrix[i][via]+matrix[via][j]; 
	              }
	           }
	       }
	   }

       int city=INT_MIN;
       int prevCount=INT_MAX;

        REP(i,0,n){
            int count=0;
            REP(j,0,n){
                if(i!=j && matrix[i][j]!=INT_MAX && matrix[i][j]<=distanceThreshold){
                    count++;
                }
            }
            if(count<=prevCount) {
                city=max(city,i);
                 prevCount=count;
            }
           
        }


        // printing the floyd warshal matrix;

        //    REP(i,0,n){
        //     REP(j,0,n){
        //         cout<<matrix[i][j]<<" ";
        //     }
        //     cout<<"\n";
        // }

        return city;
    }
};
