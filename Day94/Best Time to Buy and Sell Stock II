123. Best Time to Buy and Sell Stock II










//QUESTION LNK: https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/


TOPIC: DYNAMIC PROGRAMMING


CODE:


=class Solution {
private:
int f(int ind,int buy,int  n,vector<int>&prices,vector<vector<int>>&dp){
    if(ind==n) return 0;

    if(dp[ind][buy]!=-1) return dp[ind][buy];
    int profit=0;

    if(buy){
        profit=max(  f(ind+1,false,n,prices,dp)-prices[ind],
        f(ind+1,true,n,prices,dp)  );
    }
    else{
        profit=max(f(ind+1,true,n,prices,dp)+prices[ind],f(ind+1,false,n,prices,dp));
    }

    return dp[ind][buy]=profit;
} 

int solveTab(int n,vector<int>&prices){
    vector<vector<int>> dp(n+1,vector<int>(2,0));
    for(int j=0;j<2;j++) dp[n][j]=0;

    for(int ind=n-1;ind>=0;ind--){
        for(int buy=0;buy<=1;buy++){
             int profit=0;

            if(buy){
                profit=max(  dp[ind+1][0] -prices[ind],
                dp[ind+1][1]  );
            }
            else{
                profit=max(dp[ind+1][1] +prices[ind],dp[ind+1][0] );
            }

            dp[ind][buy]=profit;
        }
    }

    return dp[0][1];
}


int spaceOpt(int n,vector<int>&prices){
    vector<int> prev(2,0);

     for(int ind=n-1;ind>=0;ind--){
        vector<int> cur(2,0);
        for(int buy=0;buy<=1;buy++){
             int profit=0;

            if(buy){
                profit=max(  prev[0] -prices[ind],
                prev[1]  );
            }
            else{
                profit=max(prev[1] +prices[ind],prev[0] );
            }

            cur[buy]=profit;
        }
        prev=cur;
    }


    return prev[1];
}
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        // vector<vector<int>> dp(n+1,vector<int>(2,-1));
        // return f(0,true,n,prices,dp);

        return spaceOpt(n,prices);
    }
};
