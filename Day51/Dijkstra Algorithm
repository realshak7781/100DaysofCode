//Dijkstra Algorithm











//T.C: O(ElogV)
//S.C: O(V+E)

//QUESTION LNK: https://www.geeksforgeeks.org/problems/implementing-dijkstra-set-1-adjacency-matrix/1

USE OF KNOWLEDGE OF  Graphs

	public:
	//Function to find the shortest distance of all the vertices
    //from the source vertex S.
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
       unordered_map<int,list<pair<int,int>>> adjList;
        for (int u = 0; u < V; ++u) {
            for (auto& edge : adj[u]) {
                int v = edge[0];
                int weight = edge[1];
                adjList[u].push_back(make_pair(v, weight));
            }
      }
      vector<int> dist(V,INT_MAX);
      dist[S]=0;
    //   create a priority queue
       priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
      pq.push(make_pair(0, S));
      
      
      while(!pq.empty()){
          int node=pq.top().second;
          pq.pop();
          
          for(auto &neighbour:adjList[node]){
              int v=neighbour.first;
              int w=neighbour.second;
              
              if(dist[node]+w < dist[v]){
                  dist[v]=dist[node]+w;
                  pq.push(make_pair(dist[v], v));
              }
          }
      }
      
      return dist;
    }
};
