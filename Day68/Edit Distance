72. Edit Distance







//T.C:o(m*n);
//S.C: O(m*n)

//QUESTION LNK:  https://leetcode.com/problems/edit-distance/

TOPIC:   DYNAMIC PROGRAMMING

class Solution {
private:
//   int solveRecur(int i,int j,string s,string t,vector<vector<int>>&dp){
//         // Base cases
//     if (i == 0) return j;   // If word1 is empty, insert all characters of word2
//     if (j == 0) return i;   // If word2 is empty, delete all characters of word1
//     if(dp[i][j]!=-1) return dp[i][j];
//     // Recursive cases
//     if (s[i-1] == t[j-1]) 
//         return dp[i][j]=solveRecur(i-1, j-1, s, t,dp); // Characters match, no operation needed

//     else {
//        return dp[i][j]=min({
//             // Insert operation
//             1 + solveRecur(i, j-1, s, t,dp),
//             // Delete operation
//             1 + solveRecur(i-1, j, s, t,dp),
//             // Replace operation
//             1 + solveRecur(i-1, j-1, s, t,dp)
//         });
//     }
//   }

//   int solveTab(int n,int m,string s,string t){
//     vector<vector<int>> dp(n+1,vector<int>(m+1,0));
//     for(int i=0;i<=n;i++)dp[i][0]=i;
//     for(int j=1;j<=m;j++)dp[0][j]=j;

//     for(int i=1;i<=n;i++){
//         for(int j=1;j<=m;j++){
//              if (s[i-1] == t[j-1]) 
//              dp[i][j]=dp[i-1][j-1]; 

//                 else {
//                     dp[i][j]=min({
//                         // Insert operation
//                         1 + dp[i][j-1],
//                         // Delete operation
//                         1 + dp[i-1][j],
//                         // Replace operation
//                         1 + dp[i-1][j-1]
//                     });
//                 }
//         }
//     }

//     return dp[n][m];
//   } 

  int spaceOpt(int n,int m,string s,string t){
    vector<int>prev(m+1,0),cur(m+1,0);
    for(int j=1;j<=m;j++)prev[j]=j;

     for(int i=1;i<=n;i++){
        cur[0] = i; 
        for(int j=1;j<=m;j++){
             if (s[i-1] == t[j-1]) 
             cur[j]=prev[j-1]; 

                else {
                   cur[j] = 1 + min(prev[j - 1], min(prev[j], cur[j - 1]));
                }
        }
        prev=cur;
    }

    return prev[m];
  } 
public:
    int minDistance(string word1, string word2) {
        int n=word1.length(),m=word2.length();
        
        return spaceOpt(n,m,word1,word2);
    }
};
