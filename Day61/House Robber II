213. House Robber II





//T.C:o(n);
//S.C: O(1)

//QUESTION LNK:   https://leetcode.com/problems/house-robber-ii/




TOPIC:   DYNAMIC PROGRAMMING

class Solution {
public:
    int rob(vector<int>& nums) {
        int n=nums.size();
        if(n==0) return 0;
        if(n==1) return nums[0];
        if(n==2) return max(nums[0],nums[1]);
        // vector<int> dp(n,-1);

        int prev2=nums[0];
        int prev1=max(nums[0],nums[1]);

        for(int i=2;i<n-1;i++){
            int incl=nums[i]+prev2;
            int excl=prev1;

            int cur=max(incl,excl);
            prev2=prev1;
            prev1=cur;
        }

        int ans1= prev1;


         prev2=nums[1];
         prev1=max(nums[1],nums[2]);

        for(int i=3;i<n;i++){
            int incl=nums[i]+prev2;
            int excl=prev1;

            int cur=max(incl,excl);
            prev2=prev1;
            prev1=cur;
        }
        int ans2=prev1;

        return max(ans1,ans2);
    }
};
