//  Detect Cycle In A Directed Graph

//QUESTION LINK:  https://www.codingninjas.com/studio/problems/detect-cycle-in-a-directed-graph_1062626?leftPanelTab=0&leftPanelTabValue=PROBLEM

//APPROACH: USE OF KNOWLEDGE OF GRAPHS
//T.C:O(N+E)
//S.C:O(N)




CODE:

#include<list>
bool isCycle(int srcNode,unordered_map<int,list<int>>&adjList,unordered_map<int,bool> &visited, unordered_map<int,bool>&dfsCall){
  visited[srcNode]=true;
  dfsCall[srcNode]=true;

  for(auto neighbour:adjList[srcNode]){
    if(!visited[neighbour]){
      bool cyclePresent=isCycle(neighbour,adjList,visited,dfsCall);
      if(cyclePresent) return true;
    }
    else if(visited[neighbour] && dfsCall[neighbour]){
      return true;
    }
  }

  dfsCall[srcNode]=false;

  return false;
}


int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  unordered_map<int,list<int>> adjList;
  // creating an adjacency list for the given graphs
  for(int i=0;i<edges.size();i++){
    int u=edges[i].first;
    int v=edges[i].second;

    adjList[u].push_back(v);
  }

  // creation of dfs map
  unordered_map<int,bool> dfsCall;

  // creation of visited map
  unordered_map<int,bool> visited;

  for(int i=1;i<=n;i++){
    if(!visited[i]){
      bool ans=isCycle(i,adjList,visited,dfsCall);
      if(ans){
        return 1;
      }
    }
  }

  return 0;
}
