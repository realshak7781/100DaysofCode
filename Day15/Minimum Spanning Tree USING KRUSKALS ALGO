
//   Minimum Spanning Tree USING KRUSKALS ALGO

//QUESTION LINK: https://www.codingninjas.com/studio/problems/minimum-spanning-tree_631769?topList=love-babbar-dsa-sheet-problems&leftPanelTab=0&leftPanelTabValue=PROBLEM

//APPROACH: USE OF KNOWLEDGE OF GRAPHS
//T.C:O(NLOGN)
//S.C:O(N)





CODE:

#include<algorithm>

bool compare(vector<int>&a,vector<int>&b){
  return a[2]<b[2];
}

void makeSet(vector<int>&parent,vector<int>&rank,int n){
  for(int i=0;i<n;i++){
    parent[i]=i;
    rank[i]=0;
  }
}

int findParent(vector<int>&parent,int node){
  if(parent[node]==node){
    return node;
  }

  return parent[node]=findParent(parent,parent[node]);
}

void unionSet (int u,int v,vector<int>&parent,vector<int>&rank){
  u=findParent(parent,u);
  v=findParent(parent,v);

  if(rank[u]<rank[v]){
    parent[u]=v;
    }
    else if(rank[v]<rank[u]){
      parent[v]=u;
    }
    else{
      parent[v]=u;
      rank[u]++;
    }
}

int minimumSpanningTree(vector<vector<int>>& edges, int n)
{
  sort(edges.begin(),edges.end(),compare);
 vector<int> parent(n);
 vector<int> rank(n);
 makeSet(parent,rank,n);

  int totalWeight=0;
  // have to return total weight of mst as ans


 for(int i=0;i<edges.size();i++){
   int u=findParent(parent,edges[i][0]);
   int v=findParent(parent,edges[i][1]);
   int weight=edges[i][2];

   if(u!=v){
    //  they are disjoint sets
    totalWeight+=weight;
    unionSet(u,v,parent,rank);
   }
 }

 return totalWeight;
}
