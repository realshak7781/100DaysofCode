
//   1192. Critical Connections in a Network

//QUESTION LINK: https://leetcode.com/problems/critical-connections-in-a-network/description/

//APPROACH: USE OF KNOWLEDGE OF GRAPHS
//T.C:O(N+E)
//S.C:O(N)





CODE:

class Solution {
private:
void dfs(int srcNode,int parent,unordered_map<int,list<int>>& adjList, vector<int>&disc,vector<int>&low,unordered_map<int,bool>&visited,int&timer,vector<vector<int>>&result){
    visited[srcNode]=true;
    disc[srcNode]=low[srcNode]=timer++;

    for(auto neighbour:adjList[srcNode]){
        if(neighbour==parent){
            continue;
        }
        if(!visited[neighbour]){
            dfs(neighbour,srcNode,adjList,disc,low,visited,timer,result);
            low[srcNode]=min(low[srcNode],low[neighbour]);

            // check for bridge
            if(low[neighbour]>disc[srcNode]){
                result.push_back({srcNode,neighbour});
            }
        }
        else{
            // backedge
            low[srcNode]=min(low[srcNode],disc[neighbour]);
        }
    }

}
public:
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        unordered_map<int,list<int>> adjList;
  for(int i=0;i<connections.size();i++){
      int u=connections[i][0];
      int v=connections[i][1];

      adjList[u].push_back(v);
      adjList[v].push_back(u);
  }

  vector<int> disc(n,-1);
  int parent =-1;
  vector<int> low(n,-1);
  unordered_map<int,bool> visited;

  int timer=0;
  vector<vector<int >> result;

  for(int i=0;i<n;i++){
      if(!visited[i]){
          dfs(i,parent,adjList,disc,low,visited,timer,result);
      }
  }

  return result;
    }
};
