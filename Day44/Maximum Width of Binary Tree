// 662. Maximum Width of Binary Tree




//T.C: O(n)
//S.C: O(N)


//QUESTION LNK: 


USE OF KNOWLEDGE OF  BINARY TREES

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
           if(!root) return 0;
        queue<pair<TreeNode*, long long>> q;
        q.push({root, 0});

        int ans = 0;
        
        while(!q.empty()){
            int size = q.size();
            long long first, last;
            long long min = q.front().second;

            for(int i = 0; i < size; i++){
                TreeNode* curNode = q.front().first;
                long long cur_id = q.front().second - min;
                q.pop();

                if(i == 0){
                    first = cur_id;
                }
                if(i == size - 1){
                    last = cur_id;
                }

                if(curNode->left){
                    q.push({curNode->left, cur_id * 2 + 1});
                }

                if(curNode->right){
                    q.push({curNode->right, cur_id * 2 + 2});
                }
            }
            ans = max(ans, static_cast<int>(last - first + 1));
        }

        return ans;
    }
};
