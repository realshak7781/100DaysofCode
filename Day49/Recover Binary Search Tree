//99. Recover Binary Search Tree










//T.C: O(N)
//S.C: O(1)

//QUESTION LNK: https://leetcode.com/problems/recover-binary-search-tree/

USE OF KNOWLEDGE OF  BST

class Solution {
 private:
 TreeNode*first;   
 TreeNode*prev;   
 TreeNode*middle;   
 TreeNode*last; 

 void inorder(TreeNode*root){
    if(!root) return;

    inorder(root->left);
    if(prev!=NULL && root->val<prev->val){
        // first violation
        if(!first){
            first=prev;
            middle=root;
        }
        else{
            // last violation
            last=root;
        }
    }
    prev=root;
    inorder(root->right);
 }  
public:
    void recoverTree(TreeNode* root) {
        first=middle=last=NULL;
        prev=new TreeNode(INT_MIN);
        inorder(root);
        if(first && last) swap(first->val,last->val);
        else if(first && middle) swap(first->val,middle->val);
        
    }
};
