931. Minimum Falling Path Sum





//T.C:o(n*m);
//S.C: O(n)

//QUESTION LNK:  https://leetcode.com/problems/minimum-falling-path-sum/description/


TOPIC:   DYNAMIC PROGRAMMING

class Solution {
private:
int solveRecur(int i,int j,int n,vector<vector<int>>&matrix,vector<vector<int>>&dp){
    if(j<0 || j>=n) return 1e9;
    if(i==0) return matrix[i][j];

    if(dp[i][j]!=-1) return dp[i][j];

    int upLeft=matrix[i][j]+solveRecur(i-1,j-1,n,matrix,dp);
    int up=matrix[i][j]+solveRecur(i-1,j,n,matrix,dp);
    int upRight=matrix[i][j]+solveRecur(i-1,j+1,n,matrix,dp);

    return dp[i][j]= min(upLeft,min(up,upRight));
}

int solveTab(int n,vector<vector<int>>&matrix){
    vector<vector<int>> dp(n,vector<int>(n,0));

    for(int j=0;j<n;j++) dp[0][j]=matrix[0][j];

    for(int i=1;i<n;i++){
        for(int j=0;j<n;j++){
            int upLeft=1e9;
            if(j-1>=0) upLeft=dp[i-1][j-1];
            int up=dp[i-1][j];
            int upRight=1e9;
            if(j+1<n) upRight=dp[i-1][j+1];

            dp[i][j]=matrix[i][j]+ min(upLeft,min(up,upRight));
        }
    }

     int minVal = 1e9;
        for (int j = 0; j < n; j++) {
            minVal = min(minVal, dp[n - 1][j]);
        }

        return minVal;
}


int spaceOpt(int n,vector<vector<int>>&matrix){
    vector<int> prev(n,0);
    for(int j=0;j<n;j++) prev[j]=matrix[0][j];

    for(int i=1;i<n;i++){
        vector<int> cur(n);
        for(int j=0;j<n;j++){
            int upLeft=1e9;
            if(j-1>=0) upLeft=prev[j-1];
            int up=prev[j];
            int upRight=1e9;
            if(j+1<n) upRight=prev[j+1];

            cur[j]=matrix[i][j]+ min(upLeft,min(up,upRight));
        }
        prev=cur;
    }

     int minVal = 1e9;
        for (int j = 0; j < n; j++) {
            minVal = min(minVal, prev[j]);
        }

        return minVal;
}
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
         int n = matrix.size();
         int minVal=1e9;
        // vector<vector<int>> dp(n,vector<int>(n,-1));
        //  for(int i=0;i<n;i++){
        //     minVal=min(minVal,solveTab(n,matrix));
        //  }

        //  return minVal;


        return spaceOpt(n,matrix);
    }
};
