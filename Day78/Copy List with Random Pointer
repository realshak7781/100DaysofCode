138. Copy List with Random Pointer




//TC:~~O(n)
//SC:o(N)


//QUESTION LNK: https://leetcode.com/problems/copy-list-with-random-pointer/description/?envType=study-plan-v2&envId=top-interview-150


TOPIC: LINKED LISTS


CODE:

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
void insertatTail(Node*&cloneHead,int val,Node*&tail){
    Node*temp=new Node(val);
   if(cloneHead==nullptr){
       cloneHead=tail=temp;
   }
   else{
       tail->next=temp;
       tail=temp;
   }
   tail->next=nullptr;
}

Node* copyRandomList(Node* head) {
    if(head==nullptr) return head;

    Node*cloneHead=nullptr;
    Node*tail;

    Node*temp=head;
    
    // step1--> creating the cloneList
    while(temp!=nullptr){
        insertatTail(cloneHead,temp->val,tail);
        temp=temp->next;
    }

    // step2-->inserting nodes of cloned LL between original LL

    Node*twinhead=cloneHead;
    Node*originalHead=head;

    while(originalHead!=nullptr && twinhead!=nullptr){
        Node*forward=originalHead->next;
        originalHead->next=twinhead;
        originalHead=forward;
        forward=twinhead->next;
        twinhead->next=originalHead;
        twinhead=forward;
    }

    // step3--> copying random pointers;
    temp=head;

    while(temp!=nullptr){
       if(temp->next!=nullptr){
            temp->next->random=temp->random?temp->random->next:temp->random;
       }
        temp=temp->next->next;
    }

    // revert back changes done in step2
    twinhead=cloneHead;
    originalHead=head;

    while(originalHead!=nullptr && twinhead!=nullptr){
        originalHead->next=twinhead->next;
        originalHead=originalHead->next;

        if(originalHead!=nullptr) twinhead->next=originalHead->next;

        twinhead=twinhead->next;
    }

    // return  clonehead

    return cloneHead;



    
        
    }
};
