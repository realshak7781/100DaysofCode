//  Sum of Subarray Minimums




//QUESTION LNK: https://leetcode.com/problems/sum-of-subarray-minimums/

Time complexity:O(3n)
Space complexity: O(n)


USE OF KNOWLEDGE OF  stack

class Solution {
private:
void create_prev(vector<int>&arr,int length,vector<int>&prev){
    stack<int> st;
    st.push(-1);
    for(int i=0;i<length;i++){
        int curr=arr[i];

        while(st.top()!=-1 && arr[st.top()]>curr) st.pop();

        prev[i]=st.top();
        st.push(i);
    }
} 

void create_next(vector<int>&arr,int length,vector<int>&next){
    stack<int>st;
    st.push(-1);

      for(int i=length-1;i>=0;--i){
        int curr=arr[i];

         while(st.top()!=-1 && arr[st.top()]>=curr) st.pop();

    if(st.top()==-1){
        next[i]=length;
     }
     else{
        next[i]=st.top();
     }
     st.push(i);
    } 
}

public:
    int sumSubarrayMins(vector<int>& arr) {
        int length=arr.size();
        vector<int> prev(length);
        vector<int> next(length);
        create_prev(arr,length,prev);
        create_next(arr,length,next);


        long long ans = 0; // Change to long long
        int mod = 1e9 + 7;
        for (int i = 0; i < length; i++) {
            ans += ((long long)arr[i] % mod * ((i - prev[i]) % mod) * ((next[i] - i) % mod)) % mod; // Cast to long long
            ans %= mod;
        }

        return ans;

        return ans;
    }
};
