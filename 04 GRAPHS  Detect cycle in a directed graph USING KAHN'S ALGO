// Detect cycle in a directed graph USING KAHN'S ALGO

//QUESTION LINK: https://www.geeksforgeeks.org/problems/detect-cycle-in-a-directed-graph/1

//APPROACH: USE OF KNOWLEDGE OF GRAPHS
//T.C:O(v+e)
//S.C:O(v)





CODE:

bool isCyclic(int V, vector<int> adj[]) {
         vector<int> indegree(V);
	   //creating indegree vector
	  for(int i=0;i<V;i++){
	      for(auto j: adj[i]){
	          indegree[j]++;
	      }
	  }
	   
	   queue<int> q;
	   for(int i=0;i<V;i++){
	       //push 0 indegree elements in queue
	       if(indegree[i]==0){
	           q.push(i);
	       }
	   }
	   
	   
	  int cnt=0;
	   
	   //do BFS
	   while(!q.empty()){
	       int frontNode=q.front();
	       q.pop();
	       
	      cnt++;
	       for(auto neighbour: adj[frontNode]){
	           indegree[neighbour]--;
	           if(indegree[neighbour]==0){
	               q.push(neighbour);
	           }
	       }
	   }
	   
	   if(cnt==V){
	       //cycle not present
	       return false;
	   }
	   else return true;
	   
    }
