131. Palindrome Partitioning










//QUESTION LNK: https://leetcode.com/problems/palindrome-partitioning/description/


TOPIC: RECURSION AND BACKTRACKING

CODE:

class Solution {
private:
bool isPalindrome( int start, int end,string &s) {
    while (start < end) {
        if (s[start++] != s[end--]) return false;
    }
    return true;
}
void solve(int start,string s,vector<string>&currentPartition,vector<vector<string>>&result){
    if(start==s.size()){
        result.push_back(currentPartition);
        return;
    }

    for(int end=start;end<s.size();end++){
        if(isPalindrome(start,end,s)){
            currentPartition.push_back(s.substr(start,end-start+1));
            solve(end+1,s,currentPartition,result);
             currentPartition.pop_back();
        }
    }
}
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> result;
        vector<string> currentPartition;

       solve(0,s,currentPartition,result);

       return result;
    }
};
