//  COURSE SCHEDULE II




//T.C: O(v+E)
//S.C: O(v+E)


//QUESTION LNK: https://leetcode.com/problems/course-schedule/

USE OF KNOWLEDGE OF  TOPO SORT


class Solution {
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        vector<vector<int>> adj(numCourses);

         for (auto& pre : prerequisites) {
            int course = pre[0];
            int prereq = pre[1];
            adj[prereq].push_back(course);
        }
        
        vector<int> inDegree(numCourses, 0);
        queue<int> q;

        // Step 4: Calculate in-degrees
        for (int i = 0; i < numCourses; ++i) {
            for (int neighbor : adj[i]) {
                inDegree[neighbor]++;
            }
        }

        // Step 5: Enqueue courses with in-degree 0
        for (int i = 0; i < numCourses; ++i) {
            if (inDegree[i] == 0) {
                q.push(i);
            }
        }

        // Step 6: Process the queue and perform topological sort
        int count = 0;
        vector<int> ans;
        while (!q.empty()) {
            int front = q.front();
            q.pop();
            count++;
            ans.push_back(front);

            for (int neighbor : adj[front]) {
                inDegree[neighbor]--;
                if (inDegree[neighbor] == 0) {
                    q.push(neighbor);
                }
            }
        }

        if(count == numCourses){
            return ans;
        }
        else {
            return {};
        }
    }
};
