//    DFS Traversal

//QUESTION LINK: https://www.codingninjas.com/studio/problems/dfs-traversal_630462?leftPanelTab=0&leftPanelTabValue=PROBLEM

//APPROACH: USE OF KNOWLEDGE OF GRAPHS
//T.C:O(n)
//S.C:O(n)




CODE:

void dfs(int node,unordered_map<int,bool> &visited,unordered_map<int,list<int>>& adjList,vector<int>&component_dfs){
    if(!visited[node]){
        component_dfs.push_back(node);
        visited[node]=true;

        for(auto neighbour:adjList[node]){
                if(!visited[neighbour]){
                    dfs(neighbour,visited,adjList,component_dfs);
                }
            }
        
    } 
}

vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
   vector<vector<int> >ans;
   unordered_map<int,bool> visited;

//    prepare adjacency list
   unordered_map<int,list<int>> adjList;
   for(int i=0;i<edges.size();i++){
       int u=edges[i][0];
       int v=edges[i][1];
        adjList[u].push_back(v);
        adjList[v].push_back(u);
   }

//    dfs call
   for(int i=0;i<V;i++){
       if(!visited[i]){
           vector<int> component_dfs;
           dfs(i,visited,adjList,component_dfs);
           ans.push_back(component_dfs);
       }
   }

   return ans; 
}
